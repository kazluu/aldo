# Aldo - Work Hours Tracker and Invoice Generator

## Project Requirements
Create a command-line interface (CLI) application in Python called "Aldo" (like Aldo the Apache) that allows freelancers to:
1. Record daily work hours
2. Review work summaries for specific dates
3. Generate professional PDF invoices for clients based on date ranges

## Core Features
The application should have three main commands:

1. **Log Work Hours**
   - Record the number of hours worked on a specific date and what was worked on
   - Usage: `aldo log [DATE] [HOURS] [DESCRIPTION]`
   - Example: `aldo log 2025-05-15 6 "Implemented user authentication system"`
   - The description should detail what work was performed during those hours

2. **View Summary**
   - Display hours worked for a specified time period (day, month, or year)
   - Usage: `aldo summary [PERIOD]`
   - Where PERIOD is one of: "day", "month", or "year"
   - Examples:
     - `aldo summary day` - Shows hours worked today
     - `aldo summary month` - Shows hours worked this month
     - `aldo summary year` - Shows hours worked this year

3. **Generate Invoice**
   - Create a PDF invoice for a specified date range
   - Usage: `aldo generate-invoice [START_DATE] [END_DATE]`
   - Invoice should include:
     - Auto-generated invoice number
     - "From" information (your business details from config)
     - "To" information (client details from config)
     - Payment details (bank account, payment terms from config)
     - Summary of total hours worked in the period
     - Detailed breakdown of work by day with hours and descriptions
     - Hourly rate and total amount due (based on config)

## Technical Requirements
- Use Python for implementation
- Store work hours data in a persistent format (database or JSON file)
- Configuration file to store:
  - Your business information (name, address, contact details)
  - Client information (name, address, contact person)
  - Payment details (bank account, payment terms, currency)
  - Hourly rate
- Log file to track what was worked on during each hour logged
- PDF generation options:
  - Option 1: Use Gotenberg (the Go application) for HTML-to-PDF conversion
  - Option 2: Direct PDF generation from Python using libraries like ReportLab or WeasyPrint
  - **Critical requirement**: Invoice template must be easily editable (HTML/CSS or template-based)
- Include error handling for invalid inputs
- Provide helpful command documentation through --help flags